// Slack Client (discord.gg/paGUcq2UTb)

package cc.slack.features.modules.impl.exploit;

import cc.slack.start.Slack;
import cc.slack.features.modules.api.Category;
import cc.slack.features.modules.api.Module;
import cc.slack.features.modules.api.ModuleInfo;
import cc.slack.features.modules.api.settings.impl.ModeValue;
import cc.slack.features.modules.impl.render.Hud;
import io.netty.buffer.Unpooled;
import net.minecraft.client.ClientBrandRetriever;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.C17PacketCustomPayload;

@ModuleInfo(
        name = "ClientSpoofer",
        category = Category.EXPLOIT
)
public class ClientSpoofer extends Module {

    private final ModeValue<String> spooferValue = new ModeValue<>(new String[]{"Lunar", "Forge","CheatBreaker", "LabyMod", "Geyser"});

    public ClientSpoofer() {
        addSettings(spooferValue);
    }

    @Override
    public void onEnable() {
        Slack.getInstance().getModuleManager().getInstance(Hud.class).addNotification("ClientSpoofer:  Rejoin for ClientSpoofer to work", "", 3500L, Slack.NotificationStyle.WARN);
    }
    
    public C17PacketCustomPayload getC17 () {
        if (!isToggle())
            return new C17PacketCustomPayload("MC|Brand", (new PacketBuffer(Unpooled.buffer())).writeString(ClientBrandRetriever.getClientModName()));

        switch (spooferValue.getValue()) {
            case "Lunar": return new C17PacketCustomPayload("REGISTER", (new PacketBuffer(Unpooled.buffer())).writeString("Lunar-Client"));
            case "Forge": return new C17PacketCustomPayload("MC|Brand", (new PacketBuffer(Unpooled.buffer())).writeString("FML"));
            case "CheatBreaker": return new C17PacketCustomPayload("MC|Brand", (new PacketBuffer(Unpooled.buffer())).writeString("CB"));
            case "Geyser": return new C17PacketCustomPayload("MC|Brand", (new PacketBuffer(Unpooled.buffer())).writeString("Geyser"));
            case "LabyMod": return new C17PacketCustomPayload("MC|Brand", (new PacketBuffer(Unpooled.buffer())).writeString("LMC"));
        }
        return new C17PacketCustomPayload("MC|Brand", (new PacketBuffer(Unpooled.buffer())).writeString(ClientBrandRetriever.getClientModName()));
    }

    @Override
    public String getMode() {
        return spooferValue.getValue();
    }

}
