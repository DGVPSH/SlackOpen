// Slack Client (discord.gg/paGUcq2UTb)

package cc.slack.features.modules.impl.exploit;

import cc.slack.events.impl.network.PacketEvent;
import cc.slack.events.impl.player.CollideEvent;
import cc.slack.events.impl.player.MotionEvent;
import cc.slack.events.impl.player.MoveEvent;
import cc.slack.events.impl.player.UpdateEvent;
import cc.slack.features.modules.api.Category;
import cc.slack.features.modules.api.Module;
import cc.slack.features.modules.api.ModuleInfo;
import cc.slack.features.modules.api.settings.impl.ModeValue;
import cc.slack.features.modules.api.settings.impl.NumberValue;
import cc.slack.features.modules.impl.exploit.phases.IPhase;
import cc.slack.features.modules.impl.exploit.phases.impl.ClipPhase;
import cc.slack.features.modules.impl.exploit.phases.impl.HypixelBlinkPhase;
import io.github.nevalackin.radbus.Listen;
import net.minecraft.client.Minecraft;

@ModuleInfo(
        name = "Phase",
        category = Category.EXPLOIT
)
public class Phase extends Module {

    private final ModeValue<IPhase> mode = new ModeValue<>(new IPhase[]{new ClipPhase(), new HypixelBlinkPhase()});

    // Values
    public final NumberValue<Double> offset = new NumberValue<>("Clip Offset", 1D, 0.1D, 8D, 0.1D);

    public Phase() {
        super();
        addSettings(mode, offset);
    }

    @Override
    public void onEnable() {
        mode.getValue().onEnable();
    }

    @Override
    public void onDisable() {
        mc.timer.timerSpeed = 1F;
        mode.getValue().onDisable();
    }

    @Listen
    public void onMove(MoveEvent event) {
        mode.getValue().onMove(event);
    }

    @Listen
    public void onUpdate(UpdateEvent event) {
        mode.getValue().onUpdate(event);
    }

    @Listen
    public void onPacket(PacketEvent event) {
        mode.getValue().onPacket(event);
    }

    @Listen
    public void onCollide(CollideEvent event) {
        mode.getValue().onCollide(event);
    }

    @Listen
    public void onMotion(MotionEvent event) {
        mode.getValue().onMotion(event);
    }


    @Override
    public String getMode() {
        return mode.getValue().toString();
    }

}
