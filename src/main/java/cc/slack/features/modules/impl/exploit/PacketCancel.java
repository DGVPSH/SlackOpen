// Slack Client (discord.gg/paGUcq2UTb)

package cc.slack.features.modules.impl.exploit;

import cc.slack.events.impl.network.PacketEvent;
import cc.slack.features.modules.api.Category;
import cc.slack.features.modules.api.Module;
import cc.slack.features.modules.api.ModuleInfo;
import cc.slack.features.modules.api.settings.impl.BooleanValue;
import cc.slack.utils.network.PacketUtil;
import io.github.nevalackin.radbus.Listen;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketDirection;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;

@ModuleInfo(name = "PacketCancel", category = Category.EXPLOIT)
public class PacketCancel extends Module {
    public final BooleanValue cancelc0f = new BooleanValue("Cancel COF", false);
    public final BooleanValue cancelC00 = new BooleanValue("Cancel C00", false);
    public final BooleanValue cancelC0B = new BooleanValue("Cancel COB", false);
    public final BooleanValue cancelC0C = new BooleanValue("Cancel C0C", false);
    public final BooleanValue modifyc0f = new BooleanValue("Modify C0f", false);
    public PacketCancel(){
        addSettings(cancelc0f, cancelC00, cancelC0B, cancelC0C, modifyc0f);
    }
    @Listen
    public void onPacket(PacketEvent event){
        if (mc.thePlayer == null || mc.theWorld == null) return;
        if (event.getDirection() == PacketDirection.OUTGOING){
            if (event.getPacket() instanceof  C0FPacketConfirmTransaction) {
                if (modifyc0f.getValue()) {
                    Packet packet = event.getPacket();
                    ((C0FPacketConfirmTransaction) packet).uid -= 3;
                    event.cancel();
                    PacketUtil.sendNoEvent(packet);
                }
            }
            if (cancelc0f.getValue() && event.getPacket() instanceof C0FPacketConfirmTransaction) {
                event.cancel();
            }
            if (cancelC00.getValue() && event.getPacket() instanceof C00PacketKeepAlive) {
                event.cancel();
            }
            if (cancelC0B.getValue() && event.getPacket() instanceof C0BPacketEntityAction) {
                event.cancel();
            }
            if (cancelC0C.getValue() && event.getPacket() instanceof C0CPacketInput) {
                event.cancel();
            }
        }
    }
}
