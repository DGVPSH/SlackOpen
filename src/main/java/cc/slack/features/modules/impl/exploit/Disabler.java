// Slack Client (discord.gg/slackclient)

package cc.slack.features.modules.impl.exploit;

import cc.slack.events.impl.player.*;
import cc.slack.events.impl.render.RenderEvent;
import cc.slack.features.modules.impl.exploit.disablers.others.HypixelDisabler;
import cc.slack.features.modules.impl.exploit.disablers.verus.VerusCombatDisabler;
import cc.slack.start.Slack;
import cc.slack.events.impl.network.PacketEvent;
import cc.slack.features.modules.api.settings.Value;
import cc.slack.features.modules.api.settings.impl.BooleanValue;
import cc.slack.features.modules.api.settings.impl.ModeValue;
import cc.slack.features.modules.impl.exploit.disablers.IDisabler;
import cc.slack.features.modules.impl.exploit.disablers.others.NoneDisabler;
import cc.slack.features.modules.impl.exploit.disablers.others.RidingDisabler;
import cc.slack.features.modules.impl.exploit.disablers.verus.OldVerusCombatDisabler;
import cc.slack.features.modules.api.Category;
import cc.slack.features.modules.api.Module;
import cc.slack.features.modules.api.ModuleInfo;
import cc.slack.features.modules.impl.exploit.disablers.vulcan.VulcanReachDisabler;
import cc.slack.features.modules.impl.world.Scaffold;
import cc.slack.utils.font.Fonts;
import cc.slack.utils.network.PacketUtil;
import cc.slack.utils.network.BlinkUtil;
import cc.slack.utils.other.BlockUtils;
import io.github.nevalackin.radbus.Listen;
import net.minecraft.block.BlockGlass;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.*;
import net.minecraft.network.Packet;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;

@ModuleInfo(
        name = "Disabler",
        category = Category.EXPLOIT
)
public class Disabler extends Module {

    private final ModeValue<IDisabler> mode = new ModeValue<>("Mode",new IDisabler[]{
            // None
            new NoneDisabler(),

            // Hypixel
            new HypixelDisabler(),

            // Verus
            new VerusCombatDisabler(),
            new OldVerusCombatDisabler(),

            // Vulcan
            new VulcanReachDisabler(),

            // Packet edit
            new RidingDisabler()
    });

    private final  BooleanValue h = new BooleanValue("Hypixel Fast Fall", true);
    private final  BooleanValue ht = new BooleanValue("Hypixel Reach", true);


    public final BooleanValue verusonlyCombat = new BooleanValue("Verus Only Combat",true);
    private final BooleanValue verusScaffold = new BooleanValue("Verus Scaffold Check", false);
    private final BooleanValue verusOmniSprint = new BooleanValue("Verus OmniSprint Check", false);
    private final BooleanValue verusflycheck = new BooleanValue("Verus Fly Check", false);
    private final BooleanValue vulcanSprint = new BooleanValue("Vulcan Sprint Check", false);
    private final BooleanValue vulcanLimit = new BooleanValue("Vulcan Scaffold Limit Check", false);
    private final BooleanValue mmcCrits = new BooleanValue("MMC Crits", false);

    private final BooleanValue oldDisablers = new BooleanValue("Old Disablers", false);

    class e implements Value.VisibilityCheck {
        @Override
        public boolean check(){
            return oldDisablers.getValue();
        }
    }

    private final BooleanValue spectator = new BooleanValue("Spectator Spoof", false).require(new e());
    private final BooleanValue riding = new BooleanValue("Riding Spoof", false).require(new e());
    private final BooleanValue oldVulcanStrafe = new BooleanValue("Old Vulcan Strafe", false).require(new e());

    // Display
    private final ModeValue<String> displayMode = new ModeValue<>("Display", new String[]{"Simple", "Off"});


    private int c03Counter;
    boolean attackcheck = true;
    boolean jump = false;
    boolean disabling = false;
    int testTicks = 0;
    public boolean disabled = false;

    int timeTicks = 0;


    public Disabler() {
        super();
        addSettings(mode, h, ht, verusonlyCombat,verusScaffold, verusOmniSprint, verusflycheck,vulcanSprint, vulcanLimit, mmcCrits, oldDisablers, spectator, riding, oldVulcanStrafe, displayMode);
    }


    @Override
    public void onEnable() {
        disabled = false;
        disabling = false;
        mode.getValue().onEnable();
        if (verusOmniSprint.getValue() && mc.thePlayer.isSprinting()) {
            PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
        }

        if (h.getValue()) {
            jump = true;
        }
    }

    @Override
    public void onDisable() {
        mode.getValue().onDisable();
        if (ht.getValue()) {
            BlinkUtil.disable();
        }
    }

    @Listen
    public void onMove(MoveEvent event) {
        mode.getValue().onMove(event);
    }

    @Listen
    public void onMotion(MotionEvent event) {
        if (!h.getValue()) return;
        if(mc.thePlayer.onGround && jump) {

            jump = false;
            mc.thePlayer.jump();
            disabled = false;
            testTicks = 0;
            disabling = true;
            timeTicks = mc.thePlayer.ticksExisted;
        } else if(disabling && mc.thePlayer.offGroundTicks >= 10) {
            if(mc.thePlayer.offGroundTicks % 2 == 0) {
                event.setX(event.getX() + 0.095);
            }

            mc.thePlayer.motionY = mc.thePlayer.motionZ = mc.thePlayer.motionX = 0;
        }
    }

    @Listen
    public void onUpdate(UpdateEvent event) {

        if (ht.getValue()) {
            if (mc.thePlayer.ticksExisted % 2 == 0) {
                BlinkUtil.disable();
                BlinkUtil.enable(true, false);
            }
        }

        // Verus Fly Check
        if (verusflycheck.getValue()) {
            EntityPlayer player = mc.thePlayer;
            if (player == null) return;

            if (attackcheck && !player.isDead) {
                BlockPos pos = player.getPosition().add(0, player.posY > 0 ? -100 : 100, 0);
                if (pos == null) return;

                PacketUtil.send(new C08PacketPlayerBlockPlacement(
                        pos,
                        1,
                        new ItemStack(Items.water_bucket),
                        0.0F,
                        0.5F + (float)Math.random() * 0.44F,
                        0.0F
                ));
            } else {
                attackcheck = true;
            }
        }

        // Vulcan Limit
        if (vulcanLimit.getValue() && Slack.getInstance().getModuleManager().getInstance(Scaffold.class).isToggle()){
            if (mc.thePlayer.ticksExisted % 20 == 0) {
                PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
                PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
            }
        }

        //  Vulcan Sprint
        if (vulcanSprint.getValue() && Slack.getInstance().getModuleManager().getInstance(Scaffold.class).isToggle()) {
            PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SPRINTING));
            PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
        }


        mode.getValue().onUpdate(event);
    }

    @Listen
    public void onAttack(AttackEvent event) {
        attackcheck = false;
        mode.getValue().onAttack(event);
    }

    @Listen
    public void onWorld(WorldEvent event) {
        disabled = false;
        mode.getValue().onWorld(event);
    }

    @Listen
    public void onPacket(PacketEvent event) {
        final Packet packet = event.getPacket();

        if (mmcCrits.getValue() && packet instanceof C02PacketUseEntity && mc.thePlayer.motionY >= 0) {
            event.cancel();
        }

        if (h.getValue() && packet instanceof S07PacketRespawn) {
            jump = true;
        }

        if (ht.getValue() && packet instanceof C0FPacketConfirmTransaction) {
            ((C0FPacketConfirmTransaction) packet).uid -= 1;
            event.cancel();
            PacketUtil.sendNoEvent(packet);
        }
        
        if (h.getValue() && packet instanceof S08PacketPlayerPosLook) {
            if(event.getPacket() instanceof S08PacketPlayerPosLook) {
                testTicks++;
                if(testTicks == 40) {
                    disabling = false;
                    testTicks = 0;
                    timeTicks = mc.thePlayer.ticksExisted - timeTicks;
                    Slack.getInstance().addNotification("Ticks taken to disable: " + timeTicks, "", 3000L, Slack.NotificationStyle.WARN);

                    Slack.getInstance().addNotification("Jump check disabled", "", 5000L, Slack.NotificationStyle.SUCCESS);
                    disabled = true;
                    if (timeTicks < 160)
                        Slack.getInstance().addNotification("Your VL is too high!", "", 6000L, Slack.NotificationStyle.FAIL);


                } else if (testTicks <40) {
                    mc.thePlayer.motionY = mc.thePlayer.motionZ = mc.thePlayer.motionX = 0;
                }
            }
        }

        if (verusOmniSprint.getValue() && packet instanceof C0BPacketEntityAction) {
            event.cancel();
        }
        if (verusScaffold.getValue() && packet instanceof C08PacketPlayerBlockPlacement) {
            ((C08PacketPlayerBlockPlacement) packet).stack = null;
        }
        if (spectator.getValue() && packet instanceof C03PacketPlayer){
            mc.getNetHandler().addToSendQueue(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
        }
        if (riding.getValue() && packet instanceof C03PacketPlayer) {
            mc.getNetHandler().addToSendQueue(new C0CPacketInput(mc.thePlayer.moveStrafing, mc.thePlayer.moveForward, mc.thePlayer.movementInput.jump, mc.thePlayer.movementInput.sneak));
        }

        if (oldVulcanStrafe.getValue() && packet instanceof C03PacketPlayer) {
            c03Counter++;
            if (((C03PacketPlayer) packet).isMoving()) {
                if (c03Counter >= 6) {
                    PacketUtil.sendNoEvent(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK, BlockPos.ORIGIN, EnumFacing.DOWN));
                    c03Counter = 0;
                } else if (c03Counter == 6 - 2) {
                    PacketUtil.sendNoEvent(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.START_DESTROY_BLOCK, BlockPos.ORIGIN, EnumFacing.DOWN));
                }
            }
        }
        mode.getValue().onPacket(event);
    }

    @Listen
    public void onRender(RenderEvent event) {
        if (event.state != RenderEvent.State.RENDER_2D) return;

        if (h.getValue() && disabling) {
            ScaledResolution sr = mc.getScaledResolution();
            Fonts.apple18.drawCenteredStringWithShadow("Disabling Hypixel jump checks ( " + Math.round(100 * testTicks / 40.0) + "% ).", (float) sr.getScaledWidth() / 2, (float) sr.getScaledHeight() / 2 - 10,  0xffffff);
        }
    }

    @Override
    public String getMode() {
        switch (displayMode.getValue()) {
            case "Simple":
                return mode.getValue().toString();
        }
        return null;
    }

}
